<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on WeiWeiWesley</title>
    <link>/tags/redis/</link>
    <description>Recent content in redis on WeiWeiWesley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Sep 2020 14:39:08 +0800</lastBuildDate><atom:link href="/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day18 Cache (Local Cache vs Redis)</title>
      <link>/posts/2020-ithome-day18/</link>
      <pubDate>Sat, 26 Sep 2020 14:39:08 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day18/</guid>
      <description>&lt;p&gt;會有快取的需求是來自於使用者，對相同資料目標進行大量讀取，為了降低 RMDBS 連線數量與 RMDBS 的實體資源，所產生出來的架構策略。今天我們要來實作 cache，並且分別使用本地記憶體與共用noSQL兩種方式，進行比較其效果與其優劣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day17 Transactions (Redis)</title>
      <link>/posts/2020-ithome-day17/</link>
      <pubDate>Fri, 25 Sep 2020 12:34:17 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day17/</guid>
      <description>&lt;p&gt;是的，我們今天要來討論一下 Redis 的 transaction。我們知道 Transaction 要嘛全執行要嘛全不執行，Redis 在 2.2 之後提供了 optimistic lock，讓我們得以進行 check-and-set 的可能，並且實作了幾個方法讓我們可以達成 transaction 的需求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis ELK</title>
      <link>/posts/2019-09-25-redis-elk/</link>
      <pubDate>Wed, 25 Sep 2019 14:12:14 +0800</pubDate>
      
      <guid>/posts/2019-09-25-redis-elk/</guid>
      <description>&lt;p&gt;結合 reids &amp;amp; ELK 搜集分散式 log。適合想統一異質平台或已微服務化的系統使用。&lt;/p&gt;
&lt;p&gt;僅需將目標 log RPUSH 至指定的 redis key，便可輕鬆地藉由 logstash 取出至 elasticserach 最後由 kibana 呈現。&lt;/p&gt;
&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repo&#34;&gt;Repo&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WeiWeiWesley/ELK&#34;&gt;https://github.com/WeiWeiWesley/ELK&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
