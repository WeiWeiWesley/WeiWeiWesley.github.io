<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>distributed system on WeiWeiWesley</title>
    <link>/tags/distributed-system/</link>
    <description>Recent content in distributed system on WeiWeiWesley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 09:56:21 +0800</lastBuildDate><atom:link href="/tags/distributed-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day20 Kubernetes (Cluster Architecture)</title>
      <link>/posts/2020-ithome-day20/</link>
      <pubDate>Mon, 28 Sep 2020 09:56:21 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day20/</guid>
      <description>&lt;p&gt;今天介紹一下以 golang 為主編程語言，建立當前最知名的容器管理服務 — Kubernetes。我們在上一篇已經簡單的敘述過，服務是如何演進成分散式服務，而微服務又是如何因應分散式服務而產生，今天的我們會介紹 Kubernetes 的運作架構，以及關於 Kubernetes 幾個關鍵名詞解釋，Here we go。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BJOsuWS.png&#34; alt=&#34;k8s-golang&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day19 Distributed Micoservices</title>
      <link>/posts/2020-ithome-day19/</link>
      <pubDate>Sun, 27 Sep 2020 12:40:34 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day19/</guid>
      <description>&lt;p&gt;我們前面花了一些時間了解 golang 的基本用法，以及資料一致性的重要性，並且在上一篇中討論到多 server 快取資料可能發生的狀況，其中在多 server 下如果能夠保持資料存取一致，並且依據流量更彈性的增減，便是 microservices 的最大特色。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day1 系列文結構介紹</title>
      <link>/posts/2020-ithome-day1/</link>
      <pubDate>Wed, 09 Sep 2020 08:48:12 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;HiHi~!時隔多年又回來參賽拉，本次希望已經涉入軟體系統開發的工程師可以從此系列文中得到一些想法，也希望還沒應用到分散式架構或對一致性不太了解的朋友，可以體會看看遇到什麼問題的時候會需要這樣的架構編排&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
