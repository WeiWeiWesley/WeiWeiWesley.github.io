<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>distributed system on WeiWeiWesley</title>
    <link>/tags/distributed-system/</link>
    <description>Recent content in distributed system on WeiWeiWesley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Oct 2020 09:47:51 +0800</lastBuildDate><atom:link href="/tags/distributed-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day30 系列文總結與回顧</title>
      <link>/posts/2020-ithome-day30/</link>
      <pubDate>Thu, 08 Oct 2020 09:47:51 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day30/</guid>
      <description>&lt;p&gt;這次很快的來到了鐵人賽最後一天呢～今天讓我們簡單的回顧一下，系列文的結構與其中可能值得運用的地方。&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20103420/ironman/3134&#34;&gt;Go Distributed &amp;amp; Go Consistently&lt;/a&gt; 這系列文以 golang 為基底，目標在建立可靠的分散式服務或系統，如果是直接跳到本篇總結的朋友，不訪參考一下結構分析，再決定本系列文是否有適合你的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day27 NSQ (Client Usage &amp; RDY)</title>
      <link>/posts/2020-ithome-day27/</link>
      <pubDate>Mon, 05 Oct 2020 14:45:17 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day27/</guid>
      <description>&lt;p&gt;昨天簡單介紹過 NSQ架構與組成要件，今天我們來看一下實際使用的方式，與使用時需要注意的地方。範例會延續昨天架在 kubernetes 的 NSQ，請還沒有安裝朋友，自行利用&lt;a href=&#34;https://github.com/WeiWeiWesley/ithome12/tree/master/kubernetes/nsqExample&#34;&gt;範例設定&lt;/a&gt;部署。&lt;/p&gt;
&lt;p&gt;如果照著範例啟動的話，我們可以得到 3個使用相同 channel 的 consumer pods，與一個負責推送訊息至 topic 的 producer。注意到這次範例實作 Producer-Consumer Mode，故 3個 consumer 收到的 messages 總數，應等於 channel messages 總數。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9OUPKD4.png&#34; alt=&#34;nsqadmin&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day26 NSQ (Features &amp; Install)</title>
      <link>/posts/2020-ithome-day26/</link>
      <pubDate>Sun, 04 Oct 2020 15:12:12 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day26/</guid>
      <description>&lt;p&gt;在進行分散式運算時如果是想發送至不同實體， 我們可直接發出請求並等待回傳結果，但這樣在等待回傳時的運算能力是被閒置的，故此聰明的我們可能會用 &lt;code&gt;goroutine&lt;/code&gt; 將請求發送去，再利用 &lt;code&gt;select channel&lt;/code&gt; 等待回傳結果。但大量使用 &lt;code&gt;channel&lt;/code&gt; 的設計又較為複雜，維護較為困難，且依然有著請求對象沒有收到請求，或收到請求沒有回傳這樣不好處理的狀況。&lt;/p&gt;
&lt;p&gt;為了處理上述一些在訊息傳遞交換過程所面臨的問題，我們除了在邏輯上，對服務進行切分成更小的服務顆粒，對於傳遞過程可能造成的錯誤與重試必須進行掌控。NSQ 實作了我們對于訊息交換的需求，特別是在自動重試這個部分，NSQ 幫助我們可以確保資訊是有被接受並處理的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day20 Kubernetes (Cluster Architecture)</title>
      <link>/posts/2020-ithome-day20/</link>
      <pubDate>Mon, 28 Sep 2020 09:56:21 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day20/</guid>
      <description>&lt;p&gt;今天介紹一下以 golang 為主編程語言，建立當前最知名的容器管理服務 — Kubernetes。我們在上一篇已經簡單的敘述過，服務是如何演進成分散式服務，而微服務又是如何因應分散式服務而產生，今天的我們會介紹 Kubernetes 的運作架構，以及關於 Kubernetes 幾個關鍵名詞解釋，Here we go。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BJOsuWS.png&#34; alt=&#34;k8s-golang&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day19 Distributed Micoservices</title>
      <link>/posts/2020-ithome-day19/</link>
      <pubDate>Sun, 27 Sep 2020 12:40:34 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day19/</guid>
      <description>&lt;p&gt;我們前面花了一些時間了解 golang 的基本用法，以及資料一致性的重要性，並且在上一篇中討論到多 server 快取資料可能發生的狀況，其中在多 server 下如果能夠保持資料存取一致，並且依據流量更彈性的增減，便是 microservices 的最大特色。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day1 系列文結構介紹</title>
      <link>/posts/2020-ithome-day1/</link>
      <pubDate>Wed, 09 Sep 2020 08:48:12 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;HiHi~!時隔多年又回來參賽拉，本次希望已經涉入軟體系統開發的工程師可以從此系列文中得到一些想法，也希望還沒應用到分散式架構或對一致性不太了解的朋友，可以體會看看遇到什麼問題的時候會需要這樣的架構編排&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
