<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on WeiWeiWesley</title>
    <link>/categories/golang/</link>
    <description>Recent content in golang on WeiWeiWesley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Oct 2020 09:47:51 +0800</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day30 系列文總結與回顧</title>
      <link>/posts/2020-ithome-day30/</link>
      <pubDate>Thu, 08 Oct 2020 09:47:51 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day30/</guid>
      <description>&lt;p&gt;這次很快的來到了鐵人賽最後一天呢～今天讓我們簡單的回顧一下，系列文的結構與其中可能值得運用的地方。&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20103420/ironman/3134&#34;&gt;Go Distributed &amp;amp; Go Consistently&lt;/a&gt; 這系列文以 golang 為基底，目標在建立可靠的分散式服務或系統，如果是直接跳到本篇總結的朋友，不訪參考一下結構分析，再決定本系列文是否有適合你的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day29 Drone (Install &amp; Usage)</title>
      <link>/posts/2020-ithome-day29/</link>
      <pubDate>Wed, 07 Oct 2020 09:11:26 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day29/</guid>
      <description>&lt;p&gt;本系列文已經接近尾深，今天分享一個跟前面比較不一樣的主題，Drone CI/CD。分享這個工具的主因，是因為體會過 CI/CD 的美好就回不去了，剛好 Drone 是一套以 golang 編程的 CI/CD 工具，本篇讓我們使用 Github repo 當作目標，實現簡易的 CI testting。
&lt;a href=&#34;https://drone.io/&#34;&gt;&lt;img src=&#34;https://i.imgur.com/nv3AUgI.png&#34; alt=&#34;drone&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day27 NSQ (Client Usage &amp; RDY)</title>
      <link>/posts/2020-ithome-day27/</link>
      <pubDate>Mon, 05 Oct 2020 14:45:17 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day27/</guid>
      <description>&lt;p&gt;昨天簡單介紹過 NSQ架構與組成要件，今天我們來看一下實際使用的方式，與使用時需要注意的地方。範例會延續昨天架在 kubernetes 的 NSQ，請還沒有安裝朋友，自行利用&lt;a href=&#34;https://github.com/WeiWeiWesley/ithome12/tree/master/kubernetes/nsqExample&#34;&gt;範例設定&lt;/a&gt;部署。&lt;/p&gt;
&lt;p&gt;如果照著範例啟動的話，我們可以得到 3個使用相同 channel 的 consumer pods，與一個負責推送訊息至 topic 的 producer。注意到這次範例實作 Producer-Consumer Mode，故 3個 consumer 收到的 messages 總數，應等於 channel messages 總數。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9OUPKD4.png&#34; alt=&#34;nsqadmin&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day28 NSQ (Tips)</title>
      <link>/posts/2020-ithome-day28/</link>
      <pubDate>Mon, 05 Oct 2020 14:45:17 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day28/</guid>
      <description>&lt;p&gt;針對一些可能遇到的問題或需求，跟大家分享一下須注意的地方或處裡的方式。&lt;/p&gt;
&lt;h2 id=&#34;config-options&#34;&gt;Config Options&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MaxAttempts : NSQ consumer 嘗試處理訊息次數，並非無限的，預設 5次，可透過 max_attempts 進行變更&lt;/li&gt;
&lt;li&gt;BackoffStrategy : 每次重新嘗試處理訊息時，會對 &lt;code&gt;backoff +1&lt;/code&gt; ，表示下一次重新處理的時間將延後，預設延遲為指數性成長(ex 2, 4, 16 &amp;hellip;)&lt;/li&gt;
&lt;li&gt;MsgTimeout : 可設置訊息若堆積過久，沒有被送到 client 端時，自動失效&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Day26 NSQ (Features &amp; Install)</title>
      <link>/posts/2020-ithome-day26/</link>
      <pubDate>Sun, 04 Oct 2020 15:12:12 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day26/</guid>
      <description>&lt;p&gt;在進行分散式運算時如果是想發送至不同實體， 我們可直接發出請求並等待回傳結果，但這樣在等待回傳時的運算能力是被閒置的，故此聰明的我們可能會用 &lt;code&gt;goroutine&lt;/code&gt; 將請求發送去，再利用 &lt;code&gt;select channel&lt;/code&gt; 等待回傳結果。但大量使用 &lt;code&gt;channel&lt;/code&gt; 的設計又較為複雜，維護較為困難，且依然有著請求對象沒有收到請求，或收到請求沒有回傳這樣不好處理的狀況。&lt;/p&gt;
&lt;p&gt;為了處理上述一些在訊息傳遞交換過程所面臨的問題，我們除了在邏輯上，對服務進行切分成更小的服務顆粒，對於傳遞過程可能造成的錯誤與重試必須進行掌控。NSQ 實作了我們對于訊息交換的需求，特別是在自動重試這個部分，NSQ 幫助我們可以確保資訊是有被接受並處理的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day25 Istio (Load Balance gRPC)</title>
      <link>/posts/2020-ithome-day25/</link>
      <pubDate>Sat, 03 Oct 2020 11:31:26 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day25/</guid>
      <description>&lt;p&gt;今天我們實作 gRPC services，觀察 gRPC services 是否可以在有 Istio 的協助下，真的能夠順利的對流量進行 load balance。&lt;/p&gt;
&lt;h2 id=&#34;test-example&#34;&gt;Test Example&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WeiWeiWesley/ithome12/tree/master/kubernetes/gRPCExample&#34;&gt;下載完整範例&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WeiWeiWesley/ithome12/blob/master/kubernetes/gRPCExample/client/grpc-client.yaml&#34;&gt;gRPC client * 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WeiWeiWesley/ithome12/blob/master/kubernetes/gRPCExample/server/grpc-server.yaml&#34;&gt;gRPC server * 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WeiWeiWesley/ithome12/blob/master/kubernetes/gRPCExample/server/main.go&#34;&gt;Server side&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day24 Istio (Install &amp; Simple Usage)</title>
      <link>/posts/2020-ithome-day24/</link>
      <pubDate>Fri, 02 Oct 2020 10:35:18 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day24/</guid>
      <description>&lt;p&gt;我們今天飛遠一點，來介紹一下 Istio。Istio 可以提供我們更好的 load balance 能力，特別是在使用 gRPC 連線時，當前版本的 Kubernetes 本身是無法對 gRPC 連線進行 load balance 的，我們需要自己實作 sidecar 來完成 load balance 的目的，而 Istio 正好提供了我們所需要的功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day18 Cache (Local Cache vs Redis)</title>
      <link>/posts/2020-ithome-day18/</link>
      <pubDate>Sat, 26 Sep 2020 14:39:08 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day18/</guid>
      <description>&lt;p&gt;會有快取的需求是來自於使用者，對相同資料目標進行大量讀取，為了降低 RMDBS 連線數量與 RMDBS 的實體資源，所產生出來的架構策略。今天我們要來實作 cache，並且分別使用本地記憶體與共用noSQL兩種方式，進行比較其效果與其優劣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day17 Transactions (Redis)</title>
      <link>/posts/2020-ithome-day17/</link>
      <pubDate>Fri, 25 Sep 2020 12:34:17 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day17/</guid>
      <description>&lt;p&gt;是的，我們今天要來討論一下 Redis 的 transaction。我們知道 Transaction 要嘛全執行要嘛全不執行，Redis 在 2.2 之後提供了 optimistic lock，讓我們得以進行 check-and-set 的可能，並且實作了幾個方法讓我們可以達成 transaction 的需求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day16 Transactions (MySQL)</title>
      <link>/posts/2020-ithome-day16/</link>
      <pubDate>Thu, 24 Sep 2020 18:01:01 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day16/</guid>
      <description>&lt;p&gt;為了保持我們的資料能&lt;strong&gt;正確的寫入&lt;/strong&gt;與&lt;strong&gt;正確的不寫入&lt;/strong&gt;，今天我們要來了解一下 transactions 是怎麼運作的，以及如果沒有實作 transactions 會發生怎樣的悲劇，最後提供 gorm 實作 transactions 的範例程式碼給大家參考。&lt;/p&gt;
&lt;p&gt;Transactions 資料庫用來處理一連串 SQL queries的方式，用來防止服務需更新多筆資料或多個 table 時，任一筆資料更新失敗而產生的更新不完整狀態出現。被包在 transactions 中的的操作只要有一筆失敗便可以透過 rollback 來將其它已操作的部分復原。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day15 Http Server &amp; Gorm</title>
      <link>/posts/2020-ithome-day15/</link>
      <pubDate>Wed, 23 Sep 2020 10:23:57 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day15/</guid>
      <description>&lt;p&gt;依據進度我們要進入實做的部分了，昨天的 docker-compose，剛好幫我們建立了一組 slave-master MySQL database，今天將利用昨日的 DB 加上 Gin &amp;amp; Gorm packages，完成最簡易的 HTTP service。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day12 Atomic</title>
      <link>/posts/2020-ithome-day12/</link>
      <pubDate>Sun, 20 Sep 2020 12:10:37 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day12/</guid>
      <description>&lt;p&gt;關於 &lt;a href=&#34;https://golang.org/pkg/sync/atomic/&#34;&gt;sync/atomic&lt;/a&gt; 是於 &lt;a href=&#34;mailto:go@v1.14&#34;&gt;go@v1.14&lt;/a&gt; 才推出的新東西，筆者也是最近才知道有這個包可以使用。Atomic 目標在一些單純的操作上，完成最小原子性操作，使用上甚至比 mutex 更為簡便。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day11 Mutex vs Channel</title>
      <link>/posts/2020-ithome-day11/</link>
      <pubDate>Sat, 19 Sep 2020 15:50:58 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day11/</guid>
      <description>&lt;p&gt;昨天看過 race condiction 的情況後，我們了解了 mutex.Lock 與 channel，可以幫助我們同步 memory 狀態，避免發生奇怪的資料異常狀態。今天我們要延續昨天的技巧，並且用 benchmark 比較兩個在速度上的優劣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day10 Race Condition</title>
      <link>/posts/2020-ithome-day10/</link>
      <pubDate>Fri, 18 Sep 2020 13:39:05 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day10/</guid>
      <description>&lt;p&gt;在昨天我們已經看過了 golang 併發的方式，今天我們要來學習如何控制我們的 goroutines。首先我們先來看一下 race condition(或稱data race) 的定義與範例，接著我們在使用 channel 與 mutex lock 來處理這樣的問題。&lt;/p&gt;
&lt;h2 id=&#34;race-condition&#34;&gt;Race Condition&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A race condition or race hazard is the behavior of an electronics, software, or other system where the output is dependent on the sequence or timing of other uncontrollable events&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Day9 Goroutine &amp; Concurrency</title>
      <link>/posts/2020-ithome-day9/</link>
      <pubDate>Thu, 17 Sep 2020 15:30:17 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day9/</guid>
      <description>&lt;p&gt;今天不延用 BasicGo 的標題，並非 Concurrency 很困難，而是他在 golnag 中可以被輕易實踐，反而容易造成初學者的一些困擾與誤解，建議首次使用的朋友們慎重看待他。&lt;/p&gt;
&lt;h2 id=&#34;concurrency&#34;&gt;Concurrency&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下圖為例，將兩個任務個別拆分成較小的子任務，並且同時丟到 thread 中執行，由於是同時丟入 thread 中，所以順序上無法保證哪一個任務先被處理完成。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.monades.dev/concurrency-is-different-than-parallelism&#34;&gt;圖片來源&lt;/a&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/4419992/35572695-ee6275c8-05b3-11e8-8460-2c1ac7081574.jpg&#34; alt=&#34;Concurrency&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day8 Basic Go (Initialize, Scope)</title>
      <link>/posts/2020-ithome-day8/</link>
      <pubDate>Wed, 16 Sep 2020 16:10:42 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day8/</guid>
      <description>&lt;p&gt;今天我們要回來重新檢視一下 golang 的各種 Scope(作用域)，在開始 scope 的說明前還必須提到 golang 程式在 runtime 初始化的順序，確保我們對運行時每一個階段的掌握。&lt;/p&gt;
&lt;h2 id=&#34;initialization-order&#34;&gt;Initialization Order&lt;/h2&gt;
&lt;p&gt;當我們開始執行 golang 的程序時，首先會將 import packages 內部的常數變數與 init() 完成後，才開始當前 main package 下的常數變數與 init()，最後執行 main()。此外需注意的是每個 package 內的 init() 都只會被執行一次，如同其保留的命名為“初始化”時使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;import package&lt;/li&gt;
&lt;li&gt;const &amp;amp; var&lt;/li&gt;
&lt;li&gt;init()&lt;/li&gt;
&lt;li&gt;main()&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Day7 Basic Go (Run, Syntax, Struct)</title>
      <link>/posts/2020-ithome-day7/</link>
      <pubDate>Tue, 15 Sep 2020 13:34:38 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day7/</guid>
      <description>&lt;p&gt;在對環境有基本的了解後，我們終於要開始說基本語法拉～如果你是已經使用過 golang 的朋友，今天可以放心跳過這篇惹。今天我們會全速通過 golang所有基本該知道的語法，因為考量到後續篇幅的關係一些常見的型態介紹會被我省略。&lt;/p&gt;
&lt;h2 id=&#34;執行&#34;&gt;執行&lt;/h2&gt;
&lt;p&gt;讓我們以最簡單的範例檔開始吧！&lt;/p&gt;
&lt;p&gt;main.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;//主程式名稱固定為 main()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Day6 Basic Go (GO MODULES)</title>
      <link>/posts/2020-ithome-day6/</link>
      <pubDate>Mon, 14 Sep 2020 09:37:35 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day6/</guid>
      <description>&lt;h2 id=&#34;go-modules&#34;&gt;Go Modules&lt;/h2&gt;
&lt;p&gt;為了解決 &lt;a href=&#34;mailto:go@1.11&#34;&gt;go@1.11&lt;/a&gt; 前，程式運行被限制於 GOPATH/src 下相依與編譯問題，套件相依管理 go modules 誕生了。先前提到 便是  Go Modules 是否啟用的環境設定值，可分為 on, off, auto 三種。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on : 固定啟用 Go Modules ，在進行套件相依時會從 GOPATH/pkg/ 下查找&lt;/li&gt;
&lt;li&gt;off : 固定停用 Go Modules ，在進行套件相依時會從 GOPATH/src/ 下查找&lt;/li&gt;
&lt;li&gt;auto : Default setting 會依據你執行 go run or go build 等命令時的位置決定是否啟用 Go Modules ，若執行位置不在 GOPATH/src/ 下且目錄裡存在 go.mod 會啟用 Go Modules&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Day5 Basic Go (Install &amp; GOPATH)</title>
      <link>/posts/2020-ithome-day5/</link>
      <pubDate>Sun, 13 Sep 2020 12:59:41 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day5/</guid>
      <description>&lt;h2 id=&#34;來個快速安裝吧&#34;&gt;來個快速安裝吧&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;官網下載安裝檔執行&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;&lt;img src=&#34;https://i.imgur.com/54I2HSl.png&#34; alt=&#34;Download and install&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Day4 Why Go</title>
      <link>/posts/2020-ithome-day4/</link>
      <pubDate>Sat, 12 Sep 2020 15:47:24 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day4/</guid>
      <description>&lt;p&gt;先前幾天介紹 data consistency 的部分，是希望我們可以謹記資料對系統的重要性，從今天開始我們要進入用 golang 搭建 server 的實作部分，在我們可以實作前，不免俗的要介紹一下為什麼要用 golang 這個語言來進行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day2 Data consistency</title>
      <link>/posts/2020-ithome-day2/</link>
      <pubDate>Thu, 10 Sep 2020 09:37:18 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day2/</guid>
      <description>&lt;p&gt;會選擇在 distributed(分散式)之前先討論 consistency(一致性)，是由於如果我們的分散式系統所提供的服務無法保有一定程度的正確性的話，不論可以回應多大量或多快速的請求都是沒有意義的，而且可能會是一場巨大的災難。一般來說我們會討論到 data consistency，是基於複數存取實體因為時間差或實體間同步異常中斷，而產生的資料或狀態不一致，而單一 server 內因為多併發而產生的資料不一致屬於 data race 範疇，我們在後面一點的文章另外討論。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day1 系列文結構介紹</title>
      <link>/posts/2020-ithome-day1/</link>
      <pubDate>Wed, 09 Sep 2020 08:48:12 +0800</pubDate>
      
      <guid>/posts/2020-ithome-day1/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;HiHi~!時隔多年又回來參賽拉，本次希望已經涉入軟體系統開發的工程師可以從此系列文中得到一些想法，也希望還沒應用到分散式架構或對一致性不太了解的朋友，可以體會看看遇到什麼問題的時候會需要這樣的架構編排&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Websocket 壓測工具</title>
      <link>/posts/2019-06-30-webocketya-ce-gong-ju/</link>
      <pubDate>Sun, 30 Jun 2019 22:48:14 +0800</pubDate>
      
      <guid>/posts/2019-06-30-webocketya-ce-gong-ju/</guid>
      <description>&lt;p&gt;這是一個以 go語言編寫的 websocket壓測工具，提供併發連線、結果驗證、時間計算等功能。筆者目前使用的環境多為 Linux &amp;amp; MacOS，如果想在CLI簡單地對 websocket服務進行壓力測試的話，這邊提供一個簡單的工具給大家。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WeiWeiWesley/WsTestTool&#34;&gt;Github Link&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
