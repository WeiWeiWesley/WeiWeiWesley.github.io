<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021 ithome鐵人30 on WeiWeiWesley</title>
    <link>/series/2021-ithome%E9%90%B5%E4%BA%BA30/</link>
    <description>Recent content in 2021 ithome鐵人30 on WeiWeiWesley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Oct 2021 01:19:53 +0800</lastBuildDate><atom:link href="/series/2021-ithome%E9%90%B5%E4%BA%BA30/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Day30 Open-Match 使用與參賽心得</title>
      <link>/posts/2021-ithome-day30/</link>
      <pubDate>Fri, 08 Oct 2021 01:19:53 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day30/</guid>
      <description>&lt;p&gt;很開心能夠完成 30天的 Open-Match 文章分享，其實中間有些東西，是我一邊研究一邊寫出來的，所以在某些篇幅可能會顯得不夠連貫，這部分先跟有看到文章的各位，說聲不好意思。也小抱怨一下，官方提供的監控安裝流程，不知道怎會有版本過舊的問，經過了幾次嘗試與調整，才好不容易部署成功，害我多卡了三天（然後我就把監控的內容拆成三天了!）。&lt;/p&gt;
&lt;p&gt;而框架使用上本身給我的感受是，能完成的配對方式很周全，並且在&lt;code&gt;範圍的選擇&lt;/code&gt;與&lt;code&gt;配對的條件&lt;/code&gt;抽象的不錯，分別以 Director 與 MMF 來滿足我們，彈性抽換範圍與條件的需求，列出幾個比較強烈的幾個優點。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day28 Apex 模擬配對實作</title>
      <link>/posts/2021-ithome-day28/</link>
      <pubDate>Wed, 06 Oct 2021 14:33:39 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day28/</guid>
      <description>&lt;p&gt;昨天我們已經初步了解了，Apex 這款遊戲的玩法與配對機制，今天我們將基於 Open-Match 配對框架，來實作看看 Apex 的配對過程。我們將透過兩種模式、多個角色、多個區間與不同級分，來簡單模擬一下，配對可能會需要注意的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day29 總結篇</title>
      <link>/posts/2021-ithome-day29/</link>
      <pubDate>Wed, 06 Oct 2021 14:33:39 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day29/</guid>
      <description>&lt;p&gt;Open-Match 配對框架為了可以彈性調整部署規模，使用了微服務架構並結合 kubernetes 部署，同時提供了水平拓展與高可用的特性。而在這樣的設計下，衍生的問題是產生更多的接口，與不好追蹤的資料流程，故此在系列文接近尾聲的時候，讓我們來回顧一下 Open-Match 的全貌，以及我們在設計配對系統時，可以用來輔助我們工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day27 Apex 配對機制分析</title>
      <link>/posts/2021-ithome-day27/</link>
      <pubDate>Tue, 05 Oct 2021 09:48:07 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day27/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.ea.com/zh-tw/games/apex-legends/about&#34;&gt;Apex&lt;/a&gt; 為一款筆者近期最喜歡的競技遊戲，想藉著分析的名義，趁機推廣一下這款大逃殺遊戲。由於此遊戲一開始就是以競技類別推出，他本身的牌位系統，很適合延續我們討論到的牌位與配對設計，且&lt;a href=&#34;https://store.steampowered.com/stats/?l=tchinese&#34;&gt;遊戲人數&lt;/a&gt;基數夠多，勢必必須考量到配對速度的系統問題，最後就讓我們來看看想達到這樣的設計，需要在配對系統上進行的設計有哪些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day26 玩家技巧、階級與配對關係</title>
      <link>/posts/2021-ithome-day26/</link>
      <pubDate>Mon, 04 Oct 2021 12:12:26 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day26/</guid>
      <description>&lt;p&gt;我們在設計我們的競技類配對系統時，有幾個主要的中心想法分別是，想讓玩家可以與，自己技巧相近的玩家遊玩，相同階級的玩家能分出勝負，每一場配對體驗不會過於懸殊。而今天我們想要認識的，便是這些與配對系統交互影響的系統，這可以在我們評估配對系統，是否產生更好的遊玩體驗的時候，能夠有更多面向的想法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day25 測試與評量 MMF</title>
      <link>/posts/2021-ithome-day25/</link>
      <pubDate>Sun, 03 Oct 2021 00:04:26 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day25/</guid>
      <description>&lt;p&gt;Open-Match 將 MMF 以獨立部件拆出，其中一個好處是，可以讓我們單獨對配對邏輯進行單元測試。測試這個環節在想要進入營運前，也是大家不可避免的一個環節，今天會簡單實驗一下，針對官方 demo 所提供的 MMF，進行測試與 benchmark。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day24 生產環境需要注意的部分</title>
      <link>/posts/2021-ithome-day24/</link>
      <pubDate>Sat, 02 Oct 2021 13:01:25 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day24/</guid>
      <description>&lt;p&gt;在介紹過監控、yaml 控管、網路的端點暴露與附載平衡後，官方有給我們一些在，生產環境部署的建議。透過調整這些設定與部署方式，應可以使我們的 Open-Match 在水平拓展性、穩定性與可用性有更好的表現。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day23 Load balance with Istio</title>
      <link>/posts/2021-ithome-day23/</link>
      <pubDate>Fri, 01 Oct 2021 09:18:20 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day23/</guid>
      <description>&lt;p&gt;昨天非常粗淺的介紹過 istio 後，今天我們要來實際將 Istio mesh 注入我們的 cluster。此外會將今天的內容獨立為一篇，是因為筆者在嘗試，將 Istio 與 Open-Match 結合的過程並不順利，這邊準備好了最後成功的範例，希望可以多少幫助大家。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day22 Istio</title>
      <link>/posts/2021-ithome-day22/</link>
      <pubDate>Thu, 30 Sep 2021 09:17:44 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day22/</guid>
      <description>&lt;p&gt;由於 Open-Match 在 service 與 service 之間，是建議使用 gRPC 進行連線的，但在 kubernetes pods 上使用 gRPC 時，並沒有辦法自動地進行負載平衡，建立好的連線無法在各個 pods 之前切換，這時我們可以利用 &lt;a href=&#34;https://istio.io/latest/&#34;&gt;Istio service mesh&lt;/a&gt;，來幫助我們達成目標，特別是當我們的 MMF, Director &amp;amp; Frontend，需要能有負載平衡的與核心溝通時。今天讓我們簡單的看一下 Istio 的概觀，與最最基本的使用方法，想有更多瞭解可以參考這篇 &lt;a href=&#34;https://ithelp.ithome.com.tw/users/20129516/ironman/3135&#34;&gt;淺談 Istio&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day21 Open-Match 端點暴露</title>
      <link>/posts/2021-ithome-day21/</link>
      <pubDate>Wed, 29 Sep 2021 08:45:08 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day21/</guid>
      <description>&lt;p&gt;今天會說明一下，實務上如何將 Open-Match svc endpoints，從 kubernetes 中暴露出來。由於先前都是以同 cluster 之間呼叫，並不會有需要外部 ip 的問題，但進入生產環境時，極有可能會將核心與部件分開在不同的 clusters 中，故此介紹一下端點暴露的方式與呼叫的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day20 常用設定參數</title>
      <link>/posts/2021-ithome-day20/</link>
      <pubDate>Tue, 28 Sep 2021 09:05:55 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day20/</guid>
      <description>&lt;p&gt;在我們實際部署一套，可以在生產環境運行的 Open-Match 之前，我還是必須了解一下，套件本身預留哪一些空間，讓我們可以依據實際需求進行調整。這些參數除了可以透過 &lt;code&gt;helm —set&lt;/code&gt; 進行調整以外，當然也可以透過直接修改 &lt;code&gt;yaml&lt;/code&gt; 或 &lt;code&gt;open-match-configmap-override&lt;/code&gt; 內調整。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day19 Helm manage Open-Match</title>
      <link>/posts/2021-ithome-day19/</link>
      <pubDate>Mon, 27 Sep 2021 08:36:49 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day19/</guid>
      <description>&lt;p&gt;昨天非常快速的介紹了一下 Helm，了解了基礎的安裝與使用方式後，今天我們要試著用 Helm 來重新部署並安裝我們的 Open-Match，試著感受一下，有使用 Helm 將 yaml 拆分為 template 與 value 的好處。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day18 Helm</title>
      <link>/posts/2021-ithome-day18/</link>
      <pubDate>Sun, 26 Sep 2021 15:42:14 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day18/</guid>
      <description>&lt;p&gt;今天我們要先來介紹一下 &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt;，由於 Open-Match 是基於微服務建立的分散式架構，在部署上會使用大量的 yaml 檔，這在管理上會是一個小麻煩，畢竟如果每次我們在不同環境部署的時候，都需要準備不同的 yaml，小心翼翼地去調整 replicas 的數量、使用的 image 版號、核心參數的微調等等細節，是非常麻煩的，故此我們需要一套組態管理工具 Helm。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day17 Grafana (gRPC, Go Processes, Redis)</title>
      <link>/posts/2021-ithome-day17/</link>
      <pubDate>Sat, 25 Sep 2021 11:40:40 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day17/</guid>
      <description>&lt;p&gt;昨天已經介紹過，透過 grafana 監控 matching 的品質 ，今天來介紹一下，透過 grafana 監控服務在資源上的消耗，包含了 gRPC 連線狀況、Redis 的存取狀況，以及由 golang 撰寫的 Open-Match，核心程序所消耗的資源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day16 Grafana  (Match Making)</title>
      <link>/posts/2021-ithome-day16/</link>
      <pubDate>Fri, 24 Sep 2021 08:51:11 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day16/</guid>
      <description>&lt;p&gt;昨天我們安裝了 Prometheus  與 Grafana ，來協助我們觀察 Open-Match 的活動狀況，由於他的安裝實在花了我一番功夫，決定把一些監控的內容，拆分到今天來說明。所以今天會來介紹一下，我們透過 metrics 可以獲得哪些資訊，以及是使用了哪些設定檔，才能協助我們將這些 metric，轉換成易於閱讀的圖表的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day15 Open-Match 監控安裝</title>
      <link>/posts/2021-ithome-day15/</link>
      <pubDate>Thu, 23 Sep 2021 08:29:46 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day15/</guid>
      <description>&lt;p&gt;Open-Match 的基礎建構採用了 &lt;a href=&#34;https://opencensus.io/&#34;&gt;OpenCensus&lt;/a&gt; 所提供的 library，因此可暴露 metrics 提供我們即時監控的需求 ，目前可使用的有以下常見的四種工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/products/operations?hl=zh-tw&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=japac-TW-all-en-dr-bkws-all-all-trial-e-dr-1009882&amp;amp;utm_content=text-ad-none-none-DEV_c-CRE_495210765296-ADGP_Hybrid%20%7C%20BKWS%20-%20EXA%20%7C%20Txt%20~%20Hybrid%20and%20Multi-cloud%20~%20Operations%20(formerly%20Stackdriver)_stackdriver-New-KWID_43700029827991853-kwd-316511609920&amp;amp;userloc_9040380-network_g&amp;amp;utm_term=KW_stackdriver&amp;amp;gclid=EAIaIQobChMI8s_ItquP8wIVGamWCh1B_gTNEAAYASAAEgKDMvD_BwE&amp;amp;gclsrc=aw.ds&#34;&gt;Stackdriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Day14 Example of Backfill</title>
      <link>/posts/2021-ithome-day14/</link>
      <pubDate>Wed, 22 Sep 2021 08:26:03 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day14/</guid>
      <description>&lt;p&gt;延續昨天補位的情境，我們今天要來實作一下補位的範例，同樣以&lt;a href=&#34;https://github.com/googleforgames/open-match/blob/main/examples/functions/golang/backfill/mmf/matchfunction.go&#34;&gt;官方提供的範例碼&lt;/a&gt;，由筆者加上註解與 debuf log 編譯完成後，放到 docker hub 上提供大家體驗看看，請使用這份 &lt;a href=&#34;https://github.com/WeiWeiWesley/open-match/blob/backfills/backfill.yml&#34;&gt;backfill.yaml&lt;/a&gt; 部署，裏面使用的是註解過後的 &lt;a href=&#34;https://github.com/WeiWeiWesley/open-match/blob/backfills/examples/functions/golang/backfill/mmf/matchfunction.go&#34;&gt;MMF&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day13 補位策略 Backfill</title>
      <link>/posts/2021-ithome-day13/</link>
      <pubDate>Tue, 21 Sep 2021 12:37:34 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day13/</guid>
      <description>&lt;p&gt;在不同遊戲的類型可以用不同的條件配對成團，以下為常見配對後可以接受補位的情境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一場遊戲中，有一名遊戲玩家離開了遊戲，為了保持遊戲平衡與樂趣，配對系統會將新進玩家配對至本局遊戲&lt;/li&gt;
&lt;li&gt;像 APEX 大逃殺類型的遊戲，配對的過程是由按下配對後，開始等待共計 60 名玩家才能出發，若等待過程中有玩家取消等待，則會增加一個待捕空缺，伺服器會將人數補滿 60 人後才開始遊戲&lt;/li&gt;
&lt;li&gt;擁有巨大世界觀的線上 MMORPG 遊戲，為了豐富社交行為與玩家互動，會希望玩家盡可能的，填滿現有的遊戲伺服器。只有在現有伺服器已滿的情況下，才會而外加開新伺服器，但由於每個伺服器再有玩家離線時，都會產生 backfill，因此玩家來來去去時產生一個動態平衡&lt;/li&gt;
&lt;li&gt;同樣是多人配對遊戲，在有一名遊戲玩家離開後，可以透過現有遊戲玩家，邀請其好友加入遊戲的方式，產生補位的效果，而這時系統的自動補位應該取消&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Day12 同步狀態控制 Synchronizer</title>
      <link>/posts/2021-ithome-day12/</link>
      <pubDate>Mon, 20 Sep 2021 12:46:16 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day12/</guid>
      <description>&lt;p&gt;由於我們可藉由產生帶重疊範圍的配對請求，而這些配對請求將併發(Concurrently)的觸發 MMF，就算是 Evaluation 已經針對這些 overlapping 選舉出最合適的結果，這會在其餘併發中的 MMF 選舉過程，產生一個短暫的衝突時間點，為了解決這樣的困擾，我們需要使用一個外力來中斷這些 MMF，這便是 Synchronizer 的同步作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day11 配對品質評估 Evaluator</title>
      <link>/posts/2021-ithome-day11/</link>
      <pubDate>Sun, 19 Sep 2021 11:00:23 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day11/</guid>
      <description>&lt;p&gt;由於 Open-Match 在架構上，允許使用同一張 ticket，對不同的配對池進行搜尋與配對，這便是先前提到的 overlapping MatchProfiles，但如何使這些具有重疊性的匹配，最後只產生出一個最適合的匹配結果，則需要 Evaluator 介入參與。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day10 Overlapping Example</title>
      <link>/posts/2021-ithome-day10/</link>
      <pubDate>Sat, 18 Sep 2021 11:29:38 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day10/</guid>
      <description>&lt;p&gt;昨天已經看過我們在實務上可能會遇到的需求，利用多個可能重複範圍的配對池，當作匹配搜尋條件，今天讓我們用實作範例來觀察其效果。&lt;/p&gt;
&lt;h2 id=&#34;角色等級-overlapping-範例&#34;&gt;角色等級 Overlapping 範例&lt;/h2&gt;
&lt;p&gt;本範例同樣基於官方 demo，藉由更改範例內容重新 build images 後完成。&lt;/p&gt;
&lt;h3 id=&#34;images&#34;&gt;Images&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;weiweiwesley/open-match:overlapping&lt;/li&gt;
&lt;li&gt;weiweiwesley/mmf:overlapping&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Day9 重疊條件配對池 Overlapping MatchProfiles</title>
      <link>/posts/2021-ithome-day9/</link>
      <pubDate>Fri, 17 Sep 2021 08:42:40 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day9/</guid>
      <description>&lt;p&gt;在一些比較普通的應用場景，我們產生一個 matches 的流程會像是，由 Director 輪詢呼叫 Open-Match Backend 取得一組 &lt;code&gt;MatchProfile&lt;/code&gt;，而過程中會觸發 MMF 的執行，並且依照 &lt;code&gt;MatchProfile filter&lt;/code&gt; 的條件獲得對應的 &lt;code&gt;tickets&lt;/code&gt;，最後 MMF 依照設定的邏輯匹配這些 &lt;code&gt;tickets&lt;/code&gt;，返回 &lt;code&gt;matches&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day8 Swagger UI &amp; Open Match APIs</title>
      <link>/posts/2021-ithome-day8/</link>
      <pubDate>Thu, 16 Sep 2021 08:46:40 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://swagger.io/tools/swagger-ui/&#34;&gt;Swagger UI&lt;/a&gt; 是一個將 API 文件與 API 請求產生結合的介面套件，官方已於建立核心的 yaml 中，幫我們部署好 swagger ui service，但今天主要介紹的並非 Swagger UI 本身，而是利用 Swagger UI 來閱讀 Open-Match 所提供的 HTTP API 接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day7 配對條件範例 (角色，人數上限)</title>
      <link>/posts/2021-ithome-day7/</link>
      <pubDate>Wed, 15 Sep 2021 08:34:49 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day7/</guid>
      <description>&lt;p&gt;今天我們要自己假訂一個配對情境，來做一個比官方稍微複雜一點點的 Demo，並且透過這個模擬情境的實踐，來熟悉 Open-Match 在實作上須滿足的接口與函式用法。&lt;/p&gt;
&lt;h2 id=&#34;情境&#34;&gt;情境&lt;/h2&gt;
&lt;p&gt;隨機產生兩個地區、兩種職業與不同等級條件的配對請求，並且將兩個不同職業才能配對的邏輯，加入我們的配對邏輯中&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day6 Director &amp; Match Function</title>
      <link>/posts/2021-ithome-day6/</link>
      <pubDate>Tue, 14 Sep 2021 08:27:47 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day6/</guid>
      <description>&lt;p&gt;首先我們會介紹 Director 是如何實作的，並介紹 Director 跟 Open-Match 核心互動的方式。而 Director 在完成配對指派的過程中，向核心調用 Match Function 所需完成的邏輯與接口，會一併於本編介紹。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day5 Game Frontend</title>
      <link>/posts/2021-ithome-day5/</link>
      <pubDate>Mon, 13 Sep 2021 08:38:44 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day5/</guid>
      <description>&lt;p&gt;今天我們來了解一下 Game Frontend 這個須由我們實作的部件，在 Open-Match 所設計的流程中，玩家用戶端發送配對請求後，首先接收到配對請求的便是 Game Frontend。此部件內通常會實作使用者認證與獲取使用者個人資料，用以確認可進行配對，與利用個人資料組成配對參數，最後產生配對請求 Tickets 給 Open-Match 核心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mwH29cs.png&#34; alt=&#34;https://i.imgur.com/mwH29cs.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day4 官方 Demo 說明</title>
      <link>/posts/2021-ithome-day4/</link>
      <pubDate>Sun, 12 Sep 2021 11:01:13 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day4/</guid>
      <description>&lt;p&gt;今天我們要藉由官方所提供的 &lt;a href=&#34;https://open-match.dev/site/docs/getting-started/&#34;&gt;Demo&lt;/a&gt;，來介紹幾個關鍵實體與流程的運作。再開始本篇 Demo 安裝前，請確認已參照前一天的核心安裝步驟，把 Open-Match 部署完成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day3 安裝 Kubernetes &amp; Open-Match 核心</title>
      <link>/posts/2021-ithome-day3/</link>
      <pubDate>Sat, 11 Sep 2021 11:13:58 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day3/</guid>
      <description>&lt;p&gt;在昨天我們簡單介紹了框架是如何產生配對後，今天我們要來部署 Open-Match 所需要的環境與核心。基於彈性拓展需求，首先需要的是 Kubernetes Cluster，Open-Match 的核心便是安裝於此，且後續我們也會把須實作的部件，以容器的方式搭載於 Kubernetes 上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day2 初次窺探配對框架</title>
      <link>/posts/2021-ithome-day2/</link>
      <pubDate>Fri, 10 Sep 2021 08:39:51 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day2/</guid>
      <description>&lt;p&gt;在開始實作與瞭解細部功能前，讓我們先初步的看過整體架構是怎麼運作的，以利後續 demo 實作與各部件解析時，有個目前資料流動到哪裡的概念，並且會說明哪個部件是我們使用 Open-Match 需要實作的部件，哪些是 Open-Match 無需異動的核心。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Day1 Open-Match 簡介</title>
      <link>/posts/2021-ithome-day1/</link>
      <pubDate>Thu, 09 Sep 2021 08:41:08 +0800</pubDate>
      
      <guid>/posts/2021-ithome-day1/</guid>
      <description>&lt;p&gt;在眾多遊戲類型中，對戰遊戲類型遊戲佔有很重要的一席之地。不論是手機遊戲市場，還是以電腦為主的競技遊戲，當有玩家對玩家互動時，便會需要遊戲伺服器的參與，其中可能涉及連線、配對、遊戲邏輯、安全驗證等等機制。本次主題將專注在“配對”這件事上，配對可以很簡單也可以很複雜，簡單的連線數分配，或細至玩家群體分房，抑或是特定職業的搭配，都屬於配對遊程的一環。希望可以藉由本次對 Open-Match 框架介紹，讓自己與觀看此系列文的朋友都對使用此框架進行配對有基礎的認識與了解。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
